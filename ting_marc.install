<?php
/**
 * @file
 * ting_marc.install
 */

/**
 * Implements hook_install.
 */
function ting_marc_install() {
  _ting_fetch_well_types();
  features_feature_lock('ting_material_details', 'field_group');
}

/**
 * Implements hook_schema().
 */
function ting_marc_schema() {
  $schema['ting_marc'] = array(
    'description' => 'Holds marcXchange settings.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'no export' => TRUE,
      ),
      'field_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'ting_type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'marc_field' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'marc_subfield' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'marc_label' => array(
        'type' => 'varchar',
        'length' => 250,
        'not null' => TRUE,
        'default' => '',
      ),
      'field_clickable' => array(
        'description' => 'Bool identifier for clickable field.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'link_index' => array(
        'description' => 'Link index definition.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'field_name' => array('field_name'),
    ),
    'export' => array(
      'key' => 'field_name',
      'identifier' => 'field',
      'api' => array(
        'owner' => 'ting_marc',
        'api' => 'ting_marc',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
  );

  return $schema;
}

/**
 * Added machine name for the fields.
 */
function ting_marc_update_7001() {
  db_add_field('ting_marc', 'field_name', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
  ));
  db_add_unique_key('ting_marc', 'field_name', array('field_name'));
}

/**
 * Implements hook_update_N().
 *
 * Add index link and clickable options for a field.
 */
function ting_marc_update_7002() {
  $clickable = array(
    'description' => t('Bool identifier for clickable field.'),
    'type' => 'int',
    'size' => 'tiny',
    'not null' => TRUE,
    'default' => 0,
  );
  db_add_field('ting_marc', 'field_clickable', $clickable);

  $link_index = array(
    'description' => t('Link index definition.'),
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
  );
  db_add_field('ting_marc', 'link_index', $link_index);
}

/**
 * Fetch well types.
 */
function ting_marc_update_7003() {
  _ting_fetch_well_types();
}

/**
 * Updating field type.
 */
function ting_marc_update_7004() {
  // Updating ting_marc fields settings.
  db_update('ting_marc')
    ->fields(array(
      'ting_type' => 'all',
    ))
    ->condition('ting_type', 'All')
    ->execute();

  // Getting ting_marc field data from field_config.
  $marc_field_ids = db_select('field_config', 'fc')
    ->fields('fc', array('id', 'field_name'))
    ->condition('type', 'ting_marc')
    ->execute()
    ->fetchAllKeyed(0, 1);

  // Processing of found fields for update of their field instances.
  foreach ($marc_field_ids as $id => $field_name) {
    $marc_field = field_info_instance('ting_object', $field_name, 'ting_object');

    if ($marc_field['settings']['ting_type'] == 'All') {
      $marc_field['settings']['ting_type'] = 'all';
      field_update_instance($marc_field);
    }
  }
}

/**
 * Locking field_group component of ting_material_details feature.
 */
function ting_marc_update_7005() {
  features_feature_lock('ting_material_details', 'field_group');
}
