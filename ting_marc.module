<?php
/**
 * @file
 * Ting marcXchange module.
 *
 * Shows additional data on ting object page.
 */


define('TING_MARC_ADMIN', 'admin/config/ting/marc');

/**
 * Implements hook_menu().
 */
function ting_marc_menu() {
  $items = array();

  $items[TING_MARC_ADMIN] = array(
    'title' => 'Ting marcXchange',
    'description' => 'Configure additional marcXchange fields.',
    'page callback' => 'ting_marc_overview_page',
    'access arguments' => array('administer ting_marc settings'),
    'file' => 'ting_marc.admin.inc',
  );
  $items[TING_MARC_ADMIN . '/list'] = array(
    'title' => 'marcXchange fields',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'ting_marc.admin.inc',
  );

  $items[TING_MARC_ADMIN . '/settings'] = array(
    'title' => 'Module settings',
    'description' => 'Configure module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_marc_module_settings'),
    'access arguments' => array('administer ting_marc settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ting_marc.admin.inc',
  );
  $items[TING_MARC_ADMIN . '/add'] = array(
    'title' => 'Add field',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_marc_edit_item', 'add'),
    'access arguments' => array('administer ting_marc settings'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'ting_marc.admin.inc',
  );
  $items[TING_MARC_ADMIN . '/%/edit'] = array(
    'title' => 'Edit setting',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_marc_edit_item', 'edit', 4),
    'access arguments' => array('administer ting_marc settings'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'ting_marc.admin.inc',
  );
  $items[TING_MARC_ADMIN . '/%/delete'] = array(
    'title' => 'Delete setting',
    'page callback' => 'ting_marc_delete_item',
    'page arguments' => array(4),
    'access arguments' => array('administer ting_marc settings'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'ting_marc.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_ting_pre_execute().
 *
 * Add "includeMarcXchange" to request.
 */
function ting_marc_ting_pre_execute($request) {
  if ($request->getParameter('action') == 'getObjectRequest') {
    return array('includeMarcXchange' => TRUE);
  }
  return array();
}

/**
 * Implements hook_ting_post_execute().
 */
function ting_marc_ting_post_execute($request, $response, $raw_response) {
  if (!$request->getParameter('includeMarcXchange')) {
    return array();
  }

  // Does not contain marc data.
  if (empty($raw_response->searchResponse->result->searchResult[0]->collection->object[0]->collection->record)) {
    return array();
  }

  $marc = $raw_response->searchResponse->result->searchResult[0]->collection->object[0]->collection->record;

  // @todo add filter to get only required info.
  $marc_data = array();
  foreach ($marc->datafield as $field) {
    $data = array();

    if (empty($field->subfield)) {
      continue;
    }

    // Get data from subfield if it is an object.
    if (is_object($field->subfield)) {
      $data[$field->subfield->{'@code'}->{'$'}] = $field->subfield->{'$'};
    }
    else {
      // Subfield is an array.
      foreach ($field->subfield as $subfield) {
        // Skip subfields without value.
        if (empty($subfield->{'$'})) {
          continue;
        }
        $data[$subfield->{'@code'}->{'$'}] = $subfield->{'$'};
      }
    }

    if (empty($marc_data[$field->{'@tag'}->{'$'}])) {
      $marc_data[$field->{'@tag'}->{'$'}] = array();
    }
    $marc_data[$field->{'@tag'}->{'$'}] += $data;
  }

  return array('marcxchange' => $marc_data);
}


/**
 * Implements hook_block_view().
 */
function ting_marc_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'ting_marc_data':
      $items = array();

      // Read the object from cache.
      $trail = menu_get_active_trail();
      $object_id = $trail[1]['original_map'][2];
      $object = ting_get_object($object_id);

      if (!$object) {
        break;
      }

      $type = $object->getType();
      $settings = _ting_marc_get_settings($type);

      if (empty($settings) || empty($object->marcxchange)) {
        break;
      }

      $rows = array();
      foreach ($settings as $s) {
        if (empty($object->marcxchange[$s->marc_field][$s->marc_subfield])) {
          continue;
        }

        $text = $object->marcxchange[$s->marc_field][$s->marc_subfield];
        $row = array(
          'label' => $s->marc_label,
          'text' => $text,
        );
        $rows[] = $row;
      }

      $block['subject'] = NULL;
      $block['content'] = array(
        '#theme' => 'ting_marc_data',
        '#rows' => $rows,
      );
      break;
  }

  return $block;
}

/**
 * Implements hook_block_info().
 */
function ting_marc_block_info() {
  return array(
    'ting_marc_data' => array(
      'info' => t('Ting marcXchange data'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
  );
}

/**
 * Get ting_marc settings from db for given type.
 *
 * These settings are set in admin interface.
 *
 * @param string $type
 *   Type name.
 *
 * @return array
 *   Settings.
 */
function _ting_marc_get_settings($type) {
  $res = db_select('ting_marc', 'tm')
    ->fields('tm')
    ->condition('tm.ting_type', $type)
    ->execute()->fetchAll();
  return $res;
}

/**
 * Implements hook_theme().
 */
function ting_marc_theme() {
  return array(
    'ting_marc_data' => array(
      'template' => 'ting_marc_data',
      'variables' => array('rows' => array()),
    ),
  );
}

/**
 * Log messages to dblog.
 *
 * @param string $message
 *   Message to be logged.
 * @param array $data
 *   Paceholder data for message.
 */
function ting_marc_log($message, $data = array()) {
  if (variable_get('ting_marc_logging', 0)) {
    watchdog('ting_marc', $message, $data, WATCHDOG_DEBUG);
  }
}

/**
 * Implements hook_permission().
 */
function ting_marc_permission() {
  return array(
    'administer ting_marc settings' => array(
      'title' => t('Administer Ting marcXchange settings'),
    ),
  );
}
