<?php
/**
 * @file
 * Ting marcXchange module.
 *
 * Shows additional data on ting object page.
 */


define('TING_MARC_ADMIN', 'admin/config/ting/marc');

include_once __DIR__.'/ting_marc.client.inc';

drupal_add_css(drupal_get_path('module', 'ting_marc') . '/ting_marc.css');
drupal_add_js(drupal_get_path('module', 'ting_marc') . '/ting_marc.js');

/**
 * Implements hook_menu().
 */
function ting_marc_menu() {
  $items = array();

  $items[TING_MARC_ADMIN] = array(
    'title' => 'Ting marcXchange',
    'description' => 'Configure additional marcXchange fields.',
    'page callback' => 'ting_marc_overview_page',
    'access arguments' => array('administer ting_marc settings'),
    'file' => 'ting_marc.admin.inc',
  );
  $items[TING_MARC_ADMIN . '/list'] = array(
    'title' => 'marcXchange fields',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'ting_marc.admin.inc',
  );

  $items[TING_MARC_ADMIN . '/settings'] = array(
    'title' => 'Module settings',
    'description' => 'Configure module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_marc_module_settings'),
    'access arguments' => array('administer ting_marc settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ting_marc.admin.inc',
  );
  $items[TING_MARC_ADMIN . '/add'] = array(
    'title' => 'Add field',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_marc_edit_item', 'add'),
    'access arguments' => array('administer ting_marc settings'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'ting_marc.admin.inc',
  );
  $items[TING_MARC_ADMIN . '/%/edit'] = array(
    'title' => 'Edit setting',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_marc_edit_item', 'edit', 4),
    'access arguments' => array('administer ting_marc settings'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'ting_marc.admin.inc',
  );
  $items[TING_MARC_ADMIN . '/%/delete'] = array(
    'title' => 'Delete setting',
    'page callback' => 'ting_marc_delete_item',
    'page arguments' => array(4),
    'access arguments' => array('administer ting_marc settings'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'ting_marc.admin.inc',
  );

  $items['ting/marc/fields'] = array(
    'page callback' => 'ting_marc_field_js',
    'page arguments' => array(),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Get ting_marc settings from db for given type.
 *
 * These settings are set in admin interface.
 *
 * @param string $type
 *   Type name.
 *
 * @return array
 *   Settings.
 */
function _ting_marc_get_settings($type) {
  $res = db_select('ting_marc', 'tm')
    ->fields('tm')
    ->condition('tm.ting_type', $type)
    ->execute()->fetchAll();
  return $res;
}

/**
 * Implements hook_permission().
 */
function ting_marc_permission() {
  return array(
    'administer ting_marc settings' => array(
      'title' => t('Administer Ting marcXchange settings'),
    ),
  );
}

/**
 * Create/update field using ting_marc settings.
 *
 * @param array $data
 *   A field definition array.
 */
function ting_marc_create_field($data) {
  $field_name = $data['field_name'];

  $field = field_info_field($field_name);
  if ($field) {
    $instance = field_info_instance('ting_object', $field_name, 'ting_object');
    field_purge_instance($instance);
    field_purge_field($field);
  }

  $field = array(
    'field_name' => $field_name,
    'type' => 'ting_marc',
    'locked' => FALSE,
    'default_widget' => 'hidden',
    'no_ui' => TRUE,
    'entity_types' => array('ting_object'),
    'storage' => array(
      'type' => 'virtual_field',
    ),
  );
  field_create_field($field);

  $instance = array(
    'field_name' => $field_name,
    'label' => $data['marc_label'],
    'bundle' => 'ting_object',
    'entity_type' => 'ting_object',
    'settings' => array(
      'ting_type' => $data['ting_type'],
      'marc_field' => $data['marc_field'],
      'marc_subfield' => $data['marc_subfield'],
      'text_processing' => FALSE,
    ),
    'widget' => array(
      'type' => 'hidden',
    ),
    'formatter' => array(
      'type' => 'ting_marc_ajax_formatter',
    ),
    'display' => array(
      'search_result' => array(
        'label' => 'above',
      ),
    ),
  );

  field_create_instance($instance);

  // Add field to group_content group.
  $field_group_details = field_group_load_field_group('group_details', 'ting_object', 'ting_object', 'search_result');
  $field_group_details->children[] = $field_name;
  field_group_group_save($field_group_details);

  field_cache_clear();
}

/**
 * Implements hook_field_info().
 *
 * Define 'ting_marc' field type.
 */
function ting_marc_field_info() {
  return array(
    'ting_marc' => array(
      'label' => t('Ting marcXchange'),
      'description' => t('Ting marcXchange field'),
      'default_widget' => 'hidden',
      'default_formatter' => 'ting_marc_ajax_formatter',
      'storage' => array(
        'type' => 'virtual_field',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 *
 * AJAX formatter for ting_marc fields.
 */
function ting_marc_field_formatter_info() {
  return array(
    'ting_marc_ajax_formatter' => array(
      'label' => t('Ajaxified'),
      'field types' => array('ting_marc'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function ting_marc_field_formatter_info_alter(&$info) {
  if (isset($info['hidden'])) {
    $info['hidden']['field types'][] = 'ting_marc';
  }
}

/**
 * Implements hook_widget_info_alter().
 */
function ting_marc_widget_info_alter(&$info) {
  if (isset($info['hidden'])) {
    $info['hidden']['field types'][] = 'ting_marc';
  }
}

function ting_marc_preprocess_field(&$variables, $hook) {
  if ($variables['element']['#field_type'] == 'ting_marc') {
    $element = $variables['element'];

    $variables['label_hidden'] = ($element['#label_display'] == 'hidden');
    $variables['label'] = $variables['label_hidden'] ? NULL : check_plain($element['#title']);

    $variables['items'] = array();
    foreach ($element['#items'] as $delta => $item) {
      $variables['items'][$delta] = $element[$delta];
    }

    $variables['attributes_array'] = array(
      'data-ting-marc' => $variables['items'][0],
    );

    $variables['field_name_css'] = strtr($element['#field_name'], '_', '-');
    $variables['field_type_css'] = strtr($element['#field_type'], '_', '-');
    $variables['classes_array'] = array(
      'field',
      'field-name-' . $variables['field_name_css'],
      'field-type-' . $variables['field_type_css'],
      'field-label-' . $element['#label_display'],
      'ting-marc-unprocessed',
    );

    if ($element['#label_display'] == 'inline') {
      $variables['classes_array'][] = 'clearfix';
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function ting_marc_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if ($display['type'] == 'ting_marc_ajax_formatter') {
    // Check if the field applies to entity.
    $types = array($entity->getType(), 'All');
    if (!in_array($instance['settings']['ting_type'], $types)) {
      return;
    }

    $element = array();
    $settings = $instance['settings'];
    // Build fake value for template preprocessor.
    $value = $entity->getId() . '|' .$settings['marc_field'] . '|' . $settings['marc_subfield'];

    $element[0]['#markup'] = $value;
    return $element;
  }
}

/**
 * Implements hook_field_load().
 */
function ting_marc_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  foreach ($entities as $id => $entity) {
    $items[$id][0]['safe_value'] = '-';
    $items[$id][0]['value'] = '-';
  }
}

function ting_marc_get_data($id, $field, $subfield) {
  // Handle data loading by other modules first.
  // All results will be merged.
  $result = module_invoke_all('marcxchange_data', $id, $field, $subfield);
  if (!empty($result)) {
    return implode(' ', $result);
  }

  // Default data loading.
  $object = ting_marc_load_object($id);
  if (empty($object)) {
    return NULL;
  }
  $res = $object->getValue($field, $subfield);
  return $res;
}

/**
 * Implements hook_ting_request_factory().
 */
function ting_marc_ting_request_factory() {
  return array('marcxchange' => 'ting_search_url');
}

/**
 * AJAX handler for field.
 *
 * @param string $field
 *   Field name.
 * @param string $id
 *   Faust ID.
 */
function ting_marc_field_js() {
  $result = array();
  $fields = $_POST['ting_marc_fields'];
  foreach ($fields as $data) {
    list($id, $field, $subfield) = explode('|', $data);
    $value = ting_marc_get_data($id, $field, $subfield);
    if (!empty($value)) {
      $result[$data] = $value;
    }
  }
  drupal_json_output($result);
}
